# This is a esp idf workflow to build ESP32 based project
name: Build and Release

# Controls when the action will run.
on:
  push:
    tags:
      - v*

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  variants:
    name: Generate build variants
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: echo "matrix=$(cd variants && ls * | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    needs: variants
    strategy:
      # The build matrix defines the different configurations to run the job with
      matrix:
        config: ${{ fromJson(needs.variants.outputs.matrix) }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Handle SDKCONFIG overlay
        run: |
          awk 'FNR==NR { if ($0 ~ /^CONFIG_[A-Za-z0-9_]*=/) { split($0,a,"="); cfg[a[1]]=$0 } next } $0 ~ /^CONFIG_[A-Za-z0-9_]*=/ { key=substr($0,1,index($0,"=")-1); print (key in cfg ? cfg[key] : $0); next } 1; END { for (k in cfg) if (!seen[k]++) print cfg[k] }' variants/${{matrix.config}} sdkconfig > temp && mv temp sdkconfig

      - name: Extract CONFIG_IDF_TARGET
        run: |
          IDF_TARGET=$(grep '^CONFIG_IDF_TARGET=' sdkconfig | cut -d'=' -f2)
          echo "IDF_TARGET=${IDF_TARGET}" >> $GITHUB_ENV

      - name: Set BUILD_VERSION for tagged push
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "Setting BUILD_VERSION from tag"
          TAG_NAME=${GITHUB_REF#refs/tags/}
          BUILD_VERSION=${TAG_NAME#v}
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_ENV
          echo "BUILD_VERSION set to ${BUILD_VERSION}"
          echo "BUILD_VARIANT=${{ matrix.config }}" >> $GITHUB_ENV
          mkdir output

      - name: Cache Docker images.
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: docker-${{ runner.os }}-v5.4.1

      - name: idf build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.4.1
          target: ${{ env.IDF_TARGET }}
          extra_docker_args: -v ./output:/output
          command: |
            # Set up the environment
            export BUILD_VERSION=${{ env.BUILD_VERSION }}
            export BUILD_VARIANT=${{ matrix.config }}

            apt update -y
            apt install -y protobuf-compiler protobuf-c-compiler jq

            #build
            idf.py build | tee build.log

            # Extract flash_mode, flash_size, flash_freq, and binaries from build.log
            FLASH_LINE=$(grep "python -m esptool" build.log | grep -v "@flash_args" | tail -n 1)

            BINARY_INFO=$(grep -oP "^\S+\.bin binary size \S+ bytes" build.log | tail -n 1)
            BINARY_FILE=$(echo "$BINARY_INFO" | sed -n "s/^\(\S\+\.bin\).*/\1/p")

            #move artifacts
            mv build/$BINARY_FILE /output/app.bin

            #process args
            input_file="build/flasher_args.json"
            dest_dir="/output"

            # Temporary file for JSON entries
            temp_json=$(mktemp)

            # Process flash files with offsets
            jq -r --arg dest "$dest_dir" ".flash_files | to_entries[] | \"\(.key)\t\(.value)\"" "$input_file" | while IFS=$"\t" read -r offset filepath; do
                if [ -f "build/$filepath" ]; then
                    filename=$(basename "$filepath")
                    new_path="$filename"
                    cp "build/$filepath" "./output/$new_path"
                    # Append JSON object with offset and new path
                    jq -n --arg offset "$offset" --arg file "$new_path" "{offset: $offset, file: $file}" >> "$temp_json"
                else
                    echo "Warning: File not found - $filepath" >&2
                fi
            done

            # Create final JSON array
            jq -s "." "$temp_json" > $dest_dir/flash_files.json
            rm "$temp_json"

            #zip output
            zip -j -r "$dest_dir/factory.zip" "$dest_dir"
      - name: Upload factory zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config }}_factory.zip
          path: output/factory.zip

      - name: Upload OTA binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config }}_app.bin
          path: output/app.bin
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Flatten artifacts folder
        run: |
          # List all files for debugging
          find ./artifacts -type f -print

          artifacts_dir="./artifacts"

          for folder in "$artifacts_dir"/*/; do
              folder_name=$(basename "$folder")
              file_path=$(find "$folder" -type f -print -quit)
              mv -v "$file_path" "$artifacts_dir/$folder_name.tmp"
              rmdir "$folder"
              mv -v "$artifacts_dir/$folder_name.tmp" "$artifacts_dir/$folder_name"
          done
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*"
          omitBody: true
